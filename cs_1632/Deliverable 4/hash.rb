# frozen_string_literal: true

#################################################################
# stores precalculated hash values for necessary UTF-8 characters
#
# each hash value is determined as:
# ((x**3000) + (x**x) - (3**x)) * (7**x) % 65_536
# where x is the key
#################################################################
class PreHash
  def initialize
    @hash_vals = {
      0 => 0,
      1 => 65_529,
      2 => 65_291,
      3 => 40_183,
      4 => 26_959,
      5 => 2_453,
      6 => 19_031,
      7 => 21_483,
      8 => 63_391,
      9 => 6_353,
      10 => 13_543,
      11 => 44_255,
      12 => 40_431,
      13 => 62_701,
      14 => 20_663,
      15 => 42_771,
      16 => 52_031,
      17 => 27_945,
      18 => 8_071,
      19 => 61_895,
      20 => 20_367,
      21 => 32_965,
      22 => 3_415,
      23 => 54_331,
      24 => 64_223,
      25 => 42_753,
      26 => 10_791,
      27 => 30_127,
      28 => 40_239,
      29 => 46_877,
      30 => 50_679,
      31 => 1_379,
      32 => 1_663,
      33 => 61_529,
      34 => 12_487,
      35 => 17_047,
      36 => 1_743,
      37 => 41_461,
      38 => 47_767,
      39 => 58_507,
      40 => 28_191,
      41 => 62_257,
      42 => 45_927,
      43 => 25_215,
      44 => 3_183,
      45 => 19_277,
      46 => 27_447,
      47 => 39_859,
      48 => 45_503,
      49 => 55_689,
      50 => 12_807,
      51 => 57_191,
      52 => 11_791,
      53 => 48_421,
      54 => 22_487,
      55 => 54_491,
      56 => 20_831,
      57 => 19_809,
      58 => 11_431,
      59 => 49_999,
      60 => 60_335,
      61 => 381,
      62 => 119,
      63 => 47_619,
      64 => 52_479,
      65 => 30_905,
      66 => 9_031,
      67 => 6_199,
      68 => 50_511,
      69 => 8_789,
      70 => 58_647,
      71 => 62_763,
      72 => 42_143,
      73 => 1_425,
      74 => 38_375,
      75 => 59_423,
      76 => 15_087,
      77 => 10_669,
      78 => 34_231,
      79 => 45_139,
      80 => 22_591,
      81 => 7_657,
      82 => 1_159,
      83 => 15_623,
      84 => 52_367,
      85 => 8_581,
      86 => 25_175,
      87 => 38_267,
      88 => 26_591,
      89 => 27_585,
      90 => 61_223,
      91 => 8_431,
      92 => 64_047,
      93 => 5_085,
      94 => 64_247,
      95 => 52_899,
      96 => 21_375,
      97 => 6_425,
      98 => 54_727,
      99 => 40_407,
      100 => 17_359,
      101 => 2_741,
      102 => 53_143,
      103 => 1_483,
      104 => 39_711,
      105 => 53_233,
      106 => 14_439,
      107 => 48_575,
      108 => 10_607,
      109 => 4_109,
      110 => 24_631,
      111 => 25_843,
      112 => 48_831,
      113 => 47_689,
      114 => 38_663,
      115 => 35_495,
      116 => 11_023,
      117 => 11_749,
      118 => 11_479,
      119 => 38_427,
      120 => 15_967,
      121 => 33_313,
      122 => 29_095,
      123 => 3_727,
      124 => 51_375,
      125 => 28_221,
      126 => 46_455,
      127 => 49_987,
      128 => 39_423,
      129 => 20_857,
      130 => 18_503,
      131 => 21_367,
      132 => 33_359,
      133 => 56_085,
      134 => 31_255,
      135 => 38_507,
      136 => 20_895,
      137 => 53_841,
      138 => 39_655,
      139 => 25_439,
      140 => 55_279,
      141 => 32_365,
      142 => 64_183,
      143 => 14_739,
      144 => 58_687,
      145 => 11_945,
      146 => 59_783,
      147 => 18_503,
      148 => 18_831,
      149 => 25_157,
      150 => 46_935,
      151 => 22_203,
      152 => 54_495,
      153 => 4_225,
      154 => 46_119,
      155 => 3_119,
      156 => 22_319,
      157 => 37_021,
      158 => 12_279,
      159 => 6_115,
      160 => 41_087,
      161 => 41_433,
      162 => 31_431,
      163 => 47_383,
      164 => 32_975,
      165 => 4_981,
      166 => 58_519,
      167 => 9_995,
      168 => 51_231,
      169 => 36_017,
      170 => 48_487,
      171 => 22_783,
      172 => 18_031,
      173 => 62_669,
      174 => 21_815,
      175 => 44_595,
      176 => 52_159,
      177 => 64_265,
      178 => 64_519,
      179 => 62_951,
      180 => 10_255,
      181 => 16_037,
      182 => 471,
      183 => 22_363,
      184 => 11_103,
      185 => 38_625,
      186 => 46_759,
      187 => 39_375,
      188 => 42_415,
      189 => 64_253,
      190 => 27_255,
      191 => 19_587,
      192 => 26_367,
      193 => 35_385,
      194 => 27_975,
      195 => 20_151,
      196 => 16_207,
      197 => 13_269,
      198 => 3_863,
      199 => 14_251,
      200 => 65_183,
      201 => 32_529,
      202 => 40_935,
      203 => 7_839,
      204 => 29_935,
      205 => 62_253,
      206 => 28_599,
      207 => 17_107,
      208 => 29_247,
      209 => 40_809,
      210 => 52_871,
      211 => 4_999,
      212 => 50_831,
      213 => 17_157,
      214 => 3_159,
      215 => 6_139,
      216 => 16_863,
      217 => 38_209,
      218 => 31_015,
      219 => 14_191,
      220 => 46_127,
      221 => 11_613,
      222 => 25_847,
      223 => 57_635,
      224 => 60_799,
      225 => 35_481,
      226 => 8_135,
      227 => 37_975,
      228 => 48_591,
      229 => 48_181,
      230 => 63_895,
      231 => 18_507,
      232 => 62_751,
      233 => 10_609,
      234 => 16_999,
      235 => 13_375,
      236 => 25_455,
      237 => 63_885,
      238 => 18_999,
      239 => 30_579,
      240 => 55_487,
      241 => 39_881,
      242 => 24_839,
      243 => 8_487,
      244 => 9_487,
      245 => 61_285,
      246 => 54_999,
      247 => 6_299,
      248 => 6_239,
      249 => 35_745,
      250 => 64_423,
      251 => 25_871,
      252 => 33_455,
      253 => 42_941,
      254 => 8_055,
      255 => 21_955
    }
  end

  def hash(input)
    @hash_vals[input]
  end
end
